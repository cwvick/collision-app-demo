{"version":3,"sources":["components/InputBox.js","App.js","reportWebVitals.js","index.js"],"names":["InputBox","index","item","collisionList","handleDelete","handleInputChange","Segment","basic","role","Label","size","Input","type","style","marginRight","value","inputVal","onChange","e","id","data-testid","className","onClick","aria-hidden","marginLeft","join","disabled","readOnly","App","useState","int","setInt","items","setItems","maxItemId","setMaxItemId","setCollisionList","isFirstRender","useRef","useEffect","current","newItems","newCollisionList","map","parseInt","length","forEach","collisionIdx","checkArr","i","push","slice","j","val","k","indexOf","checkCollision","marginTop","Header","as","block","icon","content","Group","itemId","filter","deleteItem","event","target","replace","toUpperCase","changeInput","compact","textAlign","marginBottom","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e20f3a1b.chunk.js","sourcesContent":["import { Label, Input, Segment } from 'semantic-ui-react';\n\nconst InputBox = ({ index, item, collisionList, handleDelete, handleInputChange }) => {\n  return (\n    <Segment basic role=\"inputbox\">\n      <Label size=\"large\" role=\"label\">{index}</Label>\n      <Input \n        type=\"text\" \n        style={{ marginRight: '.8rem' }}\n        value={item.inputVal} \n        onChange={e => handleInputChange(e, item.id)}\n        data-testid=\"input-string\"\n      />\n      <button \n        className=\"ui button red icon\"\n        onClick={() => handleDelete(item.id)}\n      >\n        <i aria-hidden=\"true\" className=\"trash alternate outline icon\"></i>\n      </button>\n      <Input \n        type=\"text\"\n        style={{ marginLeft: '.8rem' }}\n        value={collisionList[index] ? collisionList[index].join(',') : ''}\n        data-testid=\"input-collision\"\n        disabled\n        readOnly \n      />\n    </Segment>\n  );\n};\n\nexport default InputBox;","import { useState, useEffect, useRef } from 'react';\nimport { Header, Segment, Input } from 'semantic-ui-react';\nimport InputBox from './components/InputBox';\n\nfunction App() {\n  const [int, setInt] = useState(3);\n  const [items, setItems] = useState([]);\n  const [maxItemId, setMaxItemId] = useState(1);\n  const [collisionList, setCollisionList] = useState([]);\n\n  const checkCollision = (newItems, int) => {\n    const newCollisionList = newItems.map(() => []);\n    int = parseInt(int);\n\n    if (!newItems.length || newItems.length <= 1) {\n      setCollisionList(newCollisionList);\n      return;\n    }\n\n    newItems.forEach((item, index) => {\n      const inputVal = item.inputVal;\n      const collisionIdx = [];\n\n      if (inputVal.length >= int) {\n        const checkArr = [];\n\n        for (let i = 0; i < inputVal.length - int + 1; i++) {\n          checkArr.push(inputVal.slice(i, int + i));\n        }\n        \n        for (let j = 0; j < newItems.length; j++) {\n          if (index !== j) {\n            const val = newItems[j].inputVal;\n\n            for (let k = 0; k < checkArr.length; k++) {\n              if (val.indexOf(checkArr[k]) !== -1) {\n                collisionIdx.push(j);\n                break;\n              }\n            }\n            \n          }\n        }\n      }\n\n      newCollisionList[index] = collisionIdx;\n    });\n\n    setCollisionList(newCollisionList);\n  };\n\n  const deleteItem = itemId => {\n    setItems(items.filter(item => itemId !== item.id));\n  };\n\n  const addItem = () => {\n    setItems([\n      ...items,\n      {\n        id: maxItemId,\n        inputVal: \"\"\n      }\n    ]);\n\n    setMaxItemId(maxItemId + 1);\n  };\n\n  const changeInput = (event, itemId) => {\n    setItems(items.map(item => {\n      if (itemId !== item.id) return item;\n      return {\n        ...item,\n        inputVal: event.target.value.replace(/ /g, '').toUpperCase()\n      }\n    }));\n  };\n\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    // prevent to check collision on the first render\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    checkCollision(items, int);\n  }, [items, int]);\n  \n  return (\n    <div className=\"ui container\" style={{ marginTop: '10px' }}>\n      <Header as='h3' block icon='cubes' content='Collision Analyzer' />\n      {items.length ? <Segment.Group>\n        {items.map((item, index) => (\n          <InputBox \n            key={item.id} \n            index={index} \n            item={item} \n            collisionList={collisionList}\n            handleDelete={itemId => deleteItem(itemId)}\n            handleInputChange={(e, itemId) => changeInput(e, itemId)}\n          />\n        ))}\n      </Segment.Group> : null}\n      <Segment compact textAlign='center'>\n        <div style={{ marginBottom: '.5rem' }}>\n          <button \n            className=\"ui button primary\"\n            onClick={addItem}\n          >\n            Add\n          </button>\n        </div>\n        <div>\n          <Input \n            type=\"number\" \n            style={{ width: '68px' }}\n            value={int}\n            onChange={e => setInt(e.target.value)}\n            data-testid=\"input-number\"\n            />\n        </div>\n      </Segment>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}